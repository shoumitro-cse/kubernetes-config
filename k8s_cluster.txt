
cluster
	1. master nodes
		1. api server
		2. etcd
		3. schedule
		4. controller
	2. Worker nodes
		1. pods
			1. containers

***************** online install *************************
# Kubernetes playground
https://labs.play-with-k8s.com/

# Play with Kubernetes Classroom
https://training.play-with-kubernetes.com/

# docker install
https://github.com/play-with-docker/play-with-kubernetes.github.io

# kubectl cheat sheet 
https://kubernetes.io/docs/reference/kubectl/cheatsheet/
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands
*****************************************************************************

Kubernetes concepts:
	Kubernetes is a container management system
	It runs and manages containerized applications on a cluster
	What does that really mean?


# Behind the scenes of kubectl run. Letâ€™s look at the resources that were created by kubectl run
# kubectl get all. We should see the following things:
1. deploy/pingpong (the deployment that we just created)
2. rs/pingpong-xxxx (a replica set created by the deployment)
3. po/pingpong-yyyy (a pod created by the replica set)


# for deployments
https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml
kubectl get deployments
kubectl get rs
kubectl get pods
kubectl get pods --show-labels
kubectl describe deployments
kubectl scale deployment/nginx-deployment --replicas=10
kubectl autoscale deployment/nginx-deployment --min=10 --max=15 --cpu-percent=80
kubectl get deploy
kubectl get rs
kubectl get deployment nginx-deployment -o yaml



A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time. 
As such, it is often used to guarantee the availability of a specified number of identical Pods.

# replica set
https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
kubectl apply -f frontend.yaml
kubectl get rs
kubectl describe rs/frontend
kubectl get pods
kubectl get pods frontend-b2zdv -o yaml


# Multi-Container Pods in Kubernetes
https://linchpiner.github.io/k8s-multi-container-pods.html
https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
kubectl apply -f myapp.yaml
kubectl get -f myapp.yaml # status


# enter a container
kubectl exec -it "pod-name" -c "container-name" -n "namespace"
kubectl exec mypod -c ruby-container -it -- bash -il
kubectl exec mc1_pod -c 1st_container -- /bin/cat /usr/share/nginx/html/index.html


# CronJob
https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/
kubectl create -f https://k8s.io/examples/application/job/cronjob.yaml
kubectl get cronjob hello
kubectl get jobs --watch
kubectl delete cronjob hello


***************************** Online command *********************************************
 # Inside master node
# First step is to initialize the cluster in the first terminal:
kubeadm init --apiserver-advertise-address $(hostname -i)


# Add node (inside worker node)
# You can now join any number of machines by running the following on each node as root:
kubeadm join --token SOME_TOKEN SOME_IP_ADDRESS --discovery-token-ca-cert-hash SOMESHAHASH

example:
kubeadm join --token a146c9.9421a0d62a0611f4 172.26.0.2:6443 --discovery-token-ca-cert-hash sha256:9a4dc07bd8ac596336ecee6ce0928b3500174037c07a38a03bebef25e97c4db5


# Inside master node
# add cluster networking
  kubectl apply -n kube-system -f \
    "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"


